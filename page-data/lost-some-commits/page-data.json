{"componentChunkName":"component---src-templates-blog-post-js","path":"/lost-some-commits/","webpackCompilationHash":"115c318475c32b7c029a","result":{"data":{"site":{"siteMetadata":{"title":"Casual Cognitions","author":"Andrew Usher"}},"mdx":{"frontmatter":{"title":"Lost Some Commits I Know I Made","date":"February 23, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lost Some Commits I Know I Made\",\n  \"date\": \"2019-02-23\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"First make sure that it was not on a different branch. Try\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git log -Sbar --all\"), \"\\xA0where \\u201Cbar\\u201D is replaced with something unique in the commits you made. You can also search with\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gitk --all --date-order\"), \"\\xA0to see if anything looks likely.Check your stashes,\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash list\"), \", to see if you might have stashed instead of committing. You can also visualize what the stashes might be associated with via:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"gitk --all --date-order $(git stash list | awk -F: '{print $1};')\\n\")), mdx(\"p\", null, \"Next, you should probably look in other repositories you have lying around including ones on other hosts and in testing environments, and in your backups.Once you are fully convinced that it is well and truly lost, you can start looking elsewhere in git. Specifically, you should first look at the reflog which contains the history of what happened to the tip of your branches for the past two weeks or so. You can of course say\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git log -g\"), \"\\xA0or\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git reflog\"), \"\\xA0to view it, but it may be best visualized with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"gitk --all --date-order $(git reflog --pretty=%H)\\n\")), mdx(\"p\", null, \"Next you can look in git\\u2019s lost and found. Dangling commits get generated for many good reasons including resets and rebases. Still those activities might have mislaid the commits you were interested in. These might be best visualized with\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gitk --all --date-order $(git fsck | grep \\\"dangling commit\\\" | awk '{print $3;}')\"), \"The last place you can look is in dangling blobs. These are files which have been\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git add\"), \"ed but not attached to a commit for some (usually innocuous) reason. To look at the files, one at a time, run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"git fsck | grep \\\"dangling blob\\\" | while read x x s; do git show $s | less; done\\n\")), mdx(\"p\", null, \"Once you find the changes you are interested in, there are several ways you can proceed. You can\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git reset --hard SHA\"), \"\\xA0your current branch to the history and current state of that SHA (probably not recommended for stashes), you can\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git branch newbranch SHA\"), \"\\xA0to link the old history to a new branch name (also not recommended for stashes), you can\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash apply SHA\"), \"\\xA0(for the non-index commit in a git-stash), you can\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash merge SHA\"), \"\\xA0or\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git cherry-pick SHA\"), \"\\xA0(for either part of a stash or non-stashes), etc.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/lost-some-commits/","previous":{"id":"0cae11d7-805d-5595-8c7e-dda4851dd6dd","fields":{"slug":"/where-to-spend-in-apartment/"},"frontmatter":{"title":"Where To Spend Money In Apartment"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Where To Spend Money In Apartment\",\n  \"date\": \"2019-02-19\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\\u2019m definitely a bargain shopper\\u2014but I\\u2019m one who knows that there are some things you should never pay full price for, and other things that deserve a splurge. I always look for discounts when I\\u2019m buying clothes or shoes for example, but when it comes to something like my cell phone, I go all out. Decorating your apartments works the same way. Here are suggestions on where to save those pennies and where to splurge in your new place.\"), mdx(\"h3\", null, \"Bedroom\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Splurge on your bed\"), \". Some people can sleep on any bed and never have issues, but if you have back problems, are a light sleeper, or get too hot or cold, choosing the right bed can be the key to your happiness. These days there are lots of choices, including traditional spring mattresses or newer foam or latex mattresses, and some are adjustable, breathable and more. They\\u2019re not cheap, but if you spend the money, your own personal bed-Zen can be achieved.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Save on\"), \"\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sheets\"), \". We\\u2019ve all been brainwashed by the concept of thread count. Is 200 just awful and 400 average? Should you go for 800 or 1,000 count Egyptian Cotton if I want the best sheets? What\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is\"), \"\\xA0thread count, anyway? Actually, thread count refers the number of threads woven together in a square inch. But according to\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.consumerreports.org/cro/news/2013/09/higher-thread-count-doesn-t-guarantee-better-sheets/index.htm\"\n  }), \"Consumer Reports\"), \", once you get beyond about 400, it becomes more of a marketing ploy or creative thread math, than a difference you can feel.\"), mdx(\"h3\", null, \"Greenery\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Splurge on real plants.\"), \"\\xA0Don\\u2019t buy fake\\u2014just don\\u2019t. If you don\\u2019t have a green thumb but want to add some ambiance to your apartment, consider something easy, like succulents or cacti. They don\\u2019t require much care, and they look exotic and eye-catching in the right pot.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Save on pots.\"), \"\\xA0Thrift stores and garages sales are a great place to get big, ceramic pots that can cost a lot in some retail stores. If you prefer to buy new, go to the garden section of Wal-Mart or Target for a few expensive-looking pots of various sizes in the same color family.\"), mdx(\"h3\", null, \"Television\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Splurge on your TV.\"), \"\\xA0This can be an important part of the house for many people (yeah, I\\u2019m talking to the guys here), so go ahead and get what you really want, because I think you\\u2019ll regret it if you don\\u2019t. After you choose from LED, plasma, or LCD, look at size. Should you get 37, 42, or 50 inches\\u2026 or more? I say splurge here and go big.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Save\"), \"\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"on\"), \"\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"your TV\"), \". Yes, you can do both. Manufacturers today have put great technology in the hands of bargain shoppers. Sure, your TV won\\u2019t be a thrift store purchase, but even brand new you can get a good deal on a quality TV if you shop around and are wiling to skip a few features, like 3D or Smart TV.\"), mdx(\"h3\", null, \"Furniture\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Splurge on a sofa\"), \"\\xA0If you choose a well-made, quality couch it can last for years. Pick a classic style and neutral color so that it can be easily adapted to changes in your taste over the years.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Save on accent pieces.\"), \"\\xA0Stores like Ross, T.J. Maxx, Cost Plus World Market and others have creative, on-trend accessories, like throw pillows, lamps, rugs, and wall hangings at low enough prices that you can switch out your living room style on a whim. This gives you an inexpensive way to freshen up that well-made, neutral couch you splurged on.\"), mdx(\"p\", null, \"So bargain shoppers, don\\u2019t be afraid to splurge a little when it comes to decorating your place - put that wallet away and save a few bucks where you can. Take my advice, your apartment will look great!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"fcf15738-a259-553c-a363-6ba32eed5696","fields":{"slug":"/improving-animation-performance/"},"frontmatter":{"title":"Improving Animation Performance"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Improving Animation Performance\",\n  \"date\": \"2019-04-10\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Custom animations can help a website stand out among the competition, but poorly optimized assets can lead to performance issues that ultimately drive away users. If any of your animations render at less than 60 frames per second, then your visitors will notice, and the user experience will suffer. This guide explains how to keep your CSS and JavaScript animations running smoothly for everyone.\"), mdx(\"h3\", null, \"CSS Animations vs JavaScript Animations\"), mdx(\"p\", null, \"Animations made with JavaScript are sometimes called imperative animations, and those made with CSS are called declarative animations. CSS animations are handled by the browser\\u2019s compositor thread rather than the main thread responsible for painting and styling. Consequently, such animations are unaffected by the main thread\\u2019s more expensive tasks. Of course, animations that trigger the paint or layout events will require work from the main thread, which negates the benefits of using CSS animations.\"), mdx(\"p\", null, \"JavaScript, on the other hand, always gets executed by the main thread. Nonetheless, JavaScript gives you greater control over animations, so you\\u2019re better off using it in some situations. While CSS is ideal for simple transitions, JavaScript is recommended for animations with advanced effects such as bouncing. Animations that allow the user to pause or rewind should also be animated with JavaScript. JavaScript is necessary to implement certain effects like parallax scrolling. With the help of the Web Animations API, you can create complex animations for object-oriented applications. You can also use JavaScript to control CSS animations.\"), mdx(\"h3\", null, \"JavaScript Animation Tips\"), mdx(\"h4\", null, \"Use requestAnimationFrame()\"), mdx(\"p\", null, \"Instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeOut()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval()\"), \", use the native JavaScript method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requestAnimationFrame()\"), \" to execute your animation code at the best time for the browser. This method chooses the appropriate frame rate for the user\\u2019s device, so mobile visitors will see a different frame rate than desktop users.\"), mdx(\"h4\", null, \"Decouple animations from events\"), mdx(\"p\", null, \"The code responsible for handling events such as scrolling should be kept separate from your animation code.\"), mdx(\"h4\", null, \"Keep your JavaScript code concise\"), mdx(\"p\", null, \"Be wary of adding huge chunks of JavaScript to your web page. If your code becomes unwieldy, you could try using web workers to execute JavaScript animations on a different thread.\"), mdx(\"h3\", null, \"Choosing Which CSS Properties to Animate\"), mdx(\"p\", null, \"Continuous animations can consume a significant amount of resources, but some CSS properties are more costly to animate than others. The harder a browser must work to animate a property, the slower the frame rate will be. Therefore, choosing the right CSS properties to animate can have a huge impact on page performance. There are three main types of CSS properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Layout properties\"), \" - These determine the size and placement of page elements. Animations that change an element\\u2019s width and height can affect the placement of other page elements, which can cause a chain reaction known as \\u201Clayout thrash.\\u201D Since animations that change the page layout are especially costly, they are best avoided.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Paint properties\"), \" - These define the appearance of page elements. Making changes to properties such as color requires repainting, which can be costly. That said, simple animations that require a small portion of the viewport to be repainted may have a negligible impact on overall performance. Larger animations that require repainting may not be worth the effort.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Composite properties\"), \" - Which include transform and opacity, are your best friends for creating CSS animations with minimal cost. With transform, you can scale and rotate animations without affecting the page layout. Try to use composite properties for animations whenever possible. With a little creative thinking, you\\u2019d be surprised by what you can pull off with just these properties. ISL.co has a helpful blog post explaining how its team turned a janky layout animation into a smooth composite animation.\"))), mdx(\"h3\", null, \"CSS Animation Tips\"), mdx(\"h4\", null, \"Avoid simultaneous animations\"), mdx(\"p\", null, \"Animations that run smoothly in isolation may not work so well on a page alongside dozens of other animations. More than two animations going at the same time is likely to cause lag. Therefore, timing your animations so that they don\\u2019t all execute all at once is vital to maintaining consistent performance. This can be accomplished by adding transition delays. Figuring out how to optimally choreograph your animations may require some trial and error, but the performance boost you\\u2019ll get is worth the effort.\"), mdx(\"h4\", null, \"Examine your animations in slow motion\"), mdx(\"p\", null, \"If an animation looks good in slow motion, it will look great at normal speed. Slowing down an animation can help you better pinpoint rendering problems.\"), mdx(\"h4\", null, \"Delay all animations by a fraction of a second\"), mdx(\"p\", null, \"Since the browser is very busy when your page begins loading, delaying all animations until a few hundred milliseconds after the initial load event can make a noticeable difference in overall page performance.\"), mdx(\"h4\", null, \"Don\\u2019t bind CSS animations to scroll\"), mdx(\"p\", null, \"Animations that follow the viewport as the user scrolls are not only annoying, but they also drag down the performance of everything else on screen.\"), mdx(\"h4\", null, \"Combine CSS with SVGs\"), mdx(\"p\", null, \"Scalable vector graphics, or SVGs, are excellent for animations since they can be scaled without degrading resolution. You can create SVGs in a program like Adobe Illustrator and apply CSS to alter their appearance. Just another reason to choose SVGs over icon fonts.\"), mdx(\"h3\", null, \"When to Use Will-Change\"), mdx(\"p\", null, \"If you\\u2019ve tried everything else and are still having performance problems, then you might want to try adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"will-change\"), \" property to your animations. As its name implies, will-change indicates that an element\\u2019s properties will change so that the browser can make appropriate preparations. List the specific properties that will change like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".element {\\n  will-change: opacity;\\n}\\n\")), mdx(\"p\", null, \"Since using will-change consumes resources, be warned that overuse can lead to further performance problems. Putting it before every animation by default isn\\u2019t recommended. Only use will-change as a last resort to optimize page performance.\"), mdx(\"h3\", null, \"Put Your Animations to the Test\"), mdx(\"p\", null, \"Performance testing should be an ongoing process while building animations for your web app. The longer you wait to identify rendering issues, the harder it becomes to pinpoint the root of the problem.\"), mdx(\"p\", null, \"The developer tools for Chrome, Firefox and Safari offer a frame-by-frame breakdown of paint and render events under their Network tabs. This information can help you optimize animations as you design them. If you\\u2019re using Chrome, look under the Rendering tab in the DevTools console for additional features such as an FPS meter.\"), mdx(\"p\", null, \"The user\\u2019s screen size has a major impact on how animations display, so be sure to test your project on multiple platforms including mobile devices.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}