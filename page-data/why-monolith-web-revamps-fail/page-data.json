{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-monolith-web-revamps-fail/","webpackCompilationHash":"115c318475c32b7c029a","result":{"data":{"site":{"siteMetadata":{"title":"Casual Cognitions","author":"Andrew Usher"}},"mdx":{"frontmatter":{"title":"Why Monolith Web Revamps Fail","date":"October 21, 2018"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why Monolith Web Revamps Fail\",\n  \"date\": \"2018-10-21\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Go into any pitch or brief for a website project and I\\u2019m fairly certain the word \\u201CResponsive\\u201D will be sprinkled liberally all throughout every conversation during the session. Whether or not everyone in the room fully understands what that word entails, is another thing altogether. But the matter of fact is, with access to the web becoming increasingly ubiquitous on an infinitely wide range of devices, responsive web design is here to stay. I personally can\\u2019t even remember the last time I built a non-responsive site.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A website redesign project is a software development project\"), \". Companies and agencies who cannot understand this or lack the expertise to handle such projects tend to find themselves in a world of trouble as the project goes on. I\\u2019m sure we\\u2019ve all heard the adage \\u201CYou never get a second chance to make a first impression\\u201D. In most agencies, the sales and marketing departments are the ones making that first impression with the client. When there is a disconnect between the marketing department and the people who create the work, everybody involved will be in for a hard time.\"), mdx(\"p\", null, \"There are a number of indicators that a website revamp will end up becoming a fire-fight, or even worse, fail altogether.\"), mdx(\"h3\", null, \"No Clear Digital Strategy\"), mdx(\"p\", null, \"Simply having a website or an app or two does not mean you\\u2019ve \\u201Cgone digital\\u201D. Your website is a tool to facilitate the digital experience, but a digital transformation is really much more than that. I highly recommend everyone who is involved in digital to read and internalise \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.digital-adaptation.com\"\n  }), \"Paul Boag\\u2019s Digital Adaptation\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"By forming a digital strategy you have an opportunity to establish a firm direction for your online footprint, rather than being the victim of managerial whims. - Paul Boag\")), mdx(\"p\", null, \"The decision to implement a responsive website is a solution. But what we need to ask is, was the problem properly defined and does this solution solve it? Without a clear digital strategy, we have no basis on which to make decisions on what the appropriate solutions should be. This is why it is important for senior management to be fully aware and supportive of the organisation\\u2019s digital strategy.\"), mdx(\"p\", null, \"All parties involved need to understand that the web is nothing like any other medium. The web is evolving at a neck-breaking pace, it is unpredictable, bordering on chaotic at times. We cannot hope to predict, control and manage this every-changing landscape. It is untenable to apply traditional business strategies, which operate on the premise that you can plan and budget for the next five years, to the web.\"), mdx(\"h3\", null, \"Insufficient Experience and Expertise\"), mdx(\"p\", null, \"This is why it is crucial to have an experienced team well-equipped to traverse this landscape. The emphasis here is on team and close collaboration across various disciplines. The traditional waterfall approach of having specialists operating in silo and passing on the project from one phase to the next is no longer effective nor relevant.\"), mdx(\"p\", null, \"For an agency who wishes to undertake such projects, it is mandatory that every person involved has strong digital backgrounds. It is not enough to simply understand the digital landscape yourself. To provide direction on how to navigate a landscape that is in a constant state of flux. Working together with the client to come up with the best approach for solving their business problems.\"), mdx(\"p\", null, \"A responsive website is just one way to cater for mobile consumers. Depending on the nature of the business and the organisation\\u2019s business strategy and objectives, maybe a native application is a better solution. There is no clear cut answer to which is better. The trick is to assess the needs of the business, then choose the solution with the best fit. Context is everything. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The problem must be framed in the context of the organisation in question\"), \".\"), mdx(\"p\", null, \"It takes expertise and experience from the digital team to not only come up with the most appropriate solution, but also, clearly articulate to senior management and relevant stakeholders why the solution was proposed, and how it can benefit the business.\"), mdx(\"h3\", null, \"Mismanagement of Expectations\"), mdx(\"p\", null, \"Without the aforementioned experience and expertise in handling responsive web projects, it is inevitable that the estimation of effort required will be terribly off the mark. The web is a reasonably young medium, and there is nothing quite like it. Stakeholders and management, who are not familiar with digital and the web, will not be able to gauge the complexity of the project. The onus thus falls on the digital team, be it internal or external, to flag out the high risk areas, and cater for worst-case scenarios accordingly.\"), mdx(\"p\", null, \"Client or stakeholder education is of utmost importance at the beginning of the project. This is where expectations are set and impressions are made. The digital team is put in charge of the endeavour because they are supposed to be the experts in this field, and can provide the necessary guidance and direction to move the project forward. Stakeholders need to understand that there will be some unknowns that will only be unearthed once development actually begins.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"It is impossible to educate another about something you do not fully understand\"), \". When the digital team lacks the requisite skills and experience, resulting in stakeholders with unrealistic expectations, the project will undoubtedly end up being a fire-fight or worse, fail altogether. A poorly scoped project, based on estimates given by someone who has no hands-on experience with the actual work required, is often a recipe for disaster.\"), mdx(\"h3\", null, \"Lack of Transparency and Communication\"), mdx(\"p\", null, \"A responsive design is more than just displaying content nicely on different screen widths. A successful responsive design is heavily dependent on content, performance and user experience. All three are intertwined, which means that the content strategists, the UX researchers, designers and developers must all be on the same page. It has to be a collaboration across disciplines.\"), mdx(\"p\", null, \"User research will drive the content and direction of the project, that in turn shapes the design, which impacts the architecture and development. Because every role brings something different to the table, communication is key. Developers understand the web more deeply than anyone else, and will be able to provide feedback on the feasibility and implications of certain design decisions. Designers will use their expertise to present the content in a way that best fits each use case. But the key thing here is, communication must take place throughout the process.\"), mdx(\"p\", null, \"The digital team are not only domain experts, but they have to be able to explain what they do and why they do it in terms that clients and stakeholders can understand. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"In other words, they also have to be professional communicators.\"), \" Without the proper buy-in from key decision makers, there is a high risk of the project collapsing like a house of cards.\"), mdx(\"p\", null, \"There will inevitably be bumps in the process or issues that the team did not expect. We cannot hide these challenges from stakeholders and pretend everything is peachy. The team needs to be up front about any issues, why they came about and explain how the issues will be mitigated. By involving the stakeholders in the mitigation plan, they might provide valuable insight that contribute to solving the issue. Perhaps that feature did not have to built that way in the first place.\"), mdx(\"h3\", null, \"Building With Sub-Optimal Processes\"), mdx(\"p\", null, \"The meat of the project is the actual building of the website. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Every website revamp must be built on clearly documented functional requirements\"), \". Some may argue that this is a relic from IT projects of the past that utilise a very water-fall approach, but I disagree. Functional requirements can take the form of user stories. This portion of the planning involves the digital team working very closely with the stakeholders to fully understand the nature and objectives of the business. The digital team\\u2019s expertise comes into play when it comes to articulating those objectives into user stories that will form the backbone of the project.\"), mdx(\"p\", null, \"From a design standpoint, a style-guide driven approach would allow for consistency throughout the site, as well as facilitate a more efficient front-end build. CSS architecture is especially important, but often overlooked. The challenge with CSS is that it is easy enough for most people to pick up, but takes effort and experience to architect well. The larger the project, the more critical it is to have working agreements on name-spacing, coding-style, file structure and a proper deployment process. Of course, this also applies to code of all languages that will be used in the project.\"), mdx(\"p\", null, \"Building up a style guide of components early allows any inconsistencies in the design to be flushed out and discussed early. I\\u2019ve worked with high-fidelity comps provided by designers that had up to 7 or 8 shades of yellow. But upon clarification with the designer, it turns out that the client had asked her to make modifications so many times that she simply missed out updating all the relevant components. But if we had instead worked on low-fidelity static comps and translated them into HTML and CSS early, things like updating colour schemes would take much less time than if a designer had to change the colours in their static PSD files.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/why-monolith-web-revamps-fail/","previous":{"id":"711ea32c-a5fb-51c1-a259-e7f0bacf919f","fields":{"slug":"/setstate-function/"},"frontmatter":{"title":"setState: a function??"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"setState: a function??\",\n  \"date\": \"2018-10-19\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Components in React are independent and reusable pieces of code that often contain their own state. They return React elements that make up the UI of an application. Components that contain local state have a property called state When we want to change our how application looks or behaves, we need to change our component\\u2019s state. So, how do we update the state of our component? React components have a method available to them called setState Calling this.setState causes React to re-render your application and update the DOM.\"), mdx(\"p\", null, \"Normally, when we want to update our component we just call setState with a new value by passing in an object to the setState function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"this.setState({ someField: someValue })\\n\")), mdx(\"p\", null, \"But, often there is a need to update our component\\u2019s state using the current state of the component. Directly accessing this.state to update our component is not a reliable way to update our component\\u2019s next state. From the React documentation:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.\")), mdx(\"p\", null, \"The key word from that documentation is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"asynchronously\"), \". Updates to the DOM don\\u2019t happen immediately when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.setState\"), \" is called. React batches updates so elements are re-rendered to the DOM efficiently.\"), mdx(\"h3\", null, \"Function in setState!\"), mdx(\"p\", null, \"Instead of passing in an object to this.setState we can pass in a function and reliably get the value of the current state of our component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"this.setState(prevState => ({\\n  someBool: !prevState.someBool,\\n}))\\n\")), mdx(\"p\", null, \"Passing in a function into setState instead of an object will give you a reliable value for your component\\u2019s state and props. If you know you\\u2019re going to use setState to update your component and you know you\\u2019re going to need the current state or the current props of your component to calculate the next state, passing in a function as the first parameter of this.setState instead of an object is the recommended solution.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"da4aadee-d96e-55f8-8900-b98ae6738783","fields":{"slug":"/monorepos-in-js/"},"frontmatter":{"title":"JavaScript Monorepos"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript Monorepos\",\n  \"date\": \"2018-11-06T23:46:37.121Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Splitting a large, monolithic codebase into small, encapsulated modules is usually good practice from an architectural perspective. Modularization is useful for everything from microservices to libraries of reusable components. However, it can also be a nightmare from a publishing and source code management perspective.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Discovery\"), \"\\xA0goes downhill when there are dozens or hundreds of code repositories. When new repositories are created, everyone has to add their existence to their mental model of where code lives.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Access control\"), \"\\xA0becomes tedious and error prone, especially when access is granted to repositories one at a time on a \\u201Cneed to know\\u201D basis. New employees tend to go through an endless loop of dependency hell. Each access request simply reveals two more repositories they need to access as well.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Versioning\"), \"\\xA0is also complicated by a highly modular architecture. It often makes sense to \\u201Csnapshot\\u201D a collection of related modules by incrementing their version in lockstep (this is what Babel and React do, for example). However, asking humans to remember to do this across a large collection of packages (including packages they haven\\u2019t had to touch) is asking for trouble.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Duplication\"), \"\\xA0of dependencies between packages can vastly increase the time required to install dependencies. Some ecosystems, npm in particular, are highly modular. This encourages reuse but also means that some packages are likely duplicated in every package you develop.\")), mdx(\"p\", null, \"Monorepos are a popular solution to this problem. Instead of one code repository per module, you put all modules in the same code repository. This \\u201Cmonorepo\\u201D is then the only thing a developer needs in order to do development with your application. Discovery, access control, and versioning are all simpler by virtue of everything being in the same place.\"), mdx(\"p\", null, \"Obviously, you have to be okay with granting access to all of the code or none of the code. But if this is acceptable, monorepos can give you all the benefits of modularization with very straightforward source code management.\"), mdx(\"p\", null, \"So how do monorepos work with npm? The two most popular solutions are Yarn workspaces and lerna. Since lerna works with npm, let\\u2019s take a look at how it implements monorepos.\"), mdx(\"p\", null, \"First, let\\u2019s install lerna globally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i -g lerna\\n\")), mdx(\"p\", null, \"Next, create new lerna repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir monorepo_example\\ncd monorepo_example\\nlerna init\\n\")), mdx(\"p\", null, \"If you look at the contents of lerna.json, you can see where the version and packages are defined.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cat lerna.json\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"packages\\\": [\\\"packages/*\\\"],\\n  \\\"version\\\": \\\"0.0.0\\\"\\n}\\n\")), mdx(\"p\", null, \"As seen above, the version for all of the packages in our monorepo is 0.0.0. However, there aren\\u2019t any packages in our monorepo yet. Before we add them, we should login to our registry so lerna sets the publishConfig correctly on each new package.\"), mdx(\"p\", null, \"If you\\u2019re publishing somewhere other than the public npm registry (for example, npm Enterprise), you\\u2019ll first need to set your registry.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm config set registry https://registry.npm.yourcompany.com\\n\")), mdx(\"p\", null, \"Next, we authenticate to the registry with a user that has publish permissions. If your packages won\\u2019t have a scope, you can omit the \\u2013scope flag.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm login \\u2013scope test\\n\")), mdx(\"p\", null, \"We now add a few scoped packages to our monorepo.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"lerna create @test/a\\nlerna create @test/b\\nlerna create @test/c\\n\")), mdx(\"p\", null, \"If you chose the default settings for each package, you\\u2019ll now have three packages (a, b, c) in the test scope with version 0.0.0. Before we can increment the version, we need to commit what we\\u2019ve got so far and create a remote for git:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git add .\\ngit commit -m \\u201CInitial commit\\u201D\\ngit remote add origin git@github.com:username/reponame.git\\ngit push -u origin master\\n\")), mdx(\"p\", null, \"Now we can bump the version of all packages with one command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"lerna version major\\n\")), mdx(\"p\", null, \"This command not only bumps every package to 1.0.0, but also pushes the version update to git for you. The last step is to publish these packages to npm. Lerna lets us do this with a single command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"lerna publish from-git\\n\")), mdx(\"p\", null, \"If this command succeeded, you\\u2019ve successfully published all packages in your first monorepo to npm. Hooray!\"), mdx(\"p\", null, \"In summary, we:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Created a new monorepo with Lerna.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Added three new scoped packages to our monorepo.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bumped the version of all packages and committed to git with a single command.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Published all packages to an npm registry with a single command.\")), mdx(\"p\", null, \"For more on Lerna, including their solution to the duplication problem (hoisting), I recommend \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://lerna.js.org\"\n  }), \"their excellent docs\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}