{"componentChunkName":"component---src-templates-blog-post-js","path":"/losing-security-deposit/","webpackCompilationHash":"115c318475c32b7c029a","result":{"data":{"site":{"siteMetadata":{"title":"Casual Cognitions","author":"Andrew Usher"}},"mdx":{"frontmatter":{"title":"How to Keep Your Security Deposit When Moving Out","date":"May 18, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Keep Your Security Deposit When Moving Out\",\n  \"date\": \"2019-05-18\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We all want that security deposit back after we move out of an apartment, right? Well, that\\u2019s not going to happen if you leave your apartment a disaster. Help yourself out here, and do what you can to be sure you get the entirety of that deposit back in your pocket.\"), mdx(\"h3\", null, \"Look Over Your Lease\"), mdx(\"p\", null, \"Look over your lease\\xA0\", \"*\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"*\", \"before you move out to see what the guidelines are for security deposits.\\xA0\", \"*\", \"*\"), \"First of all, you\\u2019ll want to make sure that your security deposit is refundable. It varies depending on the apartment. Check the lease for any other information regarding issues that could keep you from getting back the entirety of your deposit. Then, use the following tips.\"), mdx(\"h3\", null, \"Move Out Carefully\"), mdx(\"p\", null, \"Move out carefully as to not cause damage to floors, walls, etc.\\xA0\", \"*\", \"*\", \"*\", \"*\", \"When moving furniture, boxes, or any other large items, you want to be as careful as possible as to not scratch floors, bang up doors, or leave any marks on the walls. This will just be one more thing you have to worry about when repairing the apartment, so avoid it if you can.\"), mdx(\"h3\", null, \"Take Everything With You\"), mdx(\"p\", null, \"Take everything with you, and if you don\\u2019t want it, throw it out.\\xA0\", \"*\", \"*\", \"*\", \"*\", \"The worst thing you can do is leave unwanted items behind. No longer want that cheap lamp you bought at a garage sale? Don\\u2019t just leave it in the dusty corner of the living room\\u2026 throw it out. Your landlord will not appreciate having to do it for you post-move out.\"), mdx(\"h3\", null, \"Make Any And All Repairs\"), mdx(\"p\", null, \"Make any small repairs that may keep you from getting back your full deposit.\\xA0\", \"*\", \"*\", \"*\", \"*\", \"The paintings you hung on the wall sure did brighten the room, but they also left holes that need to be patched up before you leave. Patch the holes and paint over any scratches on the walls. Wall damage is oftentimes a reason tenants don\\u2019t receive the entirety of their security deposit back.\"), mdx(\"h3\", null, \"Clean Everything\"), mdx(\"p\", null, \"Clean, clean, and then clean some more.\\xA0\", \"*\", \"*\", \"*\", \"*\", \"Dust your fans. Yes, it\\u2019s a hassle, and yes, landlords check for that. Sweep, vacuum, and mop the floors. Make your bathroom and kitchen shine even brighter than when you moved in. The best thing you can do is make sure you are keeping up your apartment throughout your entire lease, so when it comes to move out time, you aren\\u2019t spending three hours deep cleaning your bathroom. Make it easy on yourself and just routine clean the apartment throughout the time of your lease.\"), mdx(\"h3\", null, \"Be There For The Inspection\"), mdx(\"p\", null, \"Go through move-out inspection with the landlord\\xA0\", \"*\", \"*\", \"*\", \"*\", \"to be sure you\\u2019re on the same page about any potential damages/issues that could cost you. If they go through it without you, they could find issues that you weren\\u2019t even aware of that could\\u2019ve been fixed before you left for good. Don\\u2019t let these potential issues cost you in the end.\"), mdx(\"h3\", null, \"Return Your Keys\"), mdx(\"p\", null, \"Return your keys\\xA0\", \"*\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"*\", \"and anything else you have to return after completely moving out.\\xA0\", \"*\", \"*\"), \"It\\u2019s easy to forget this step, but you\\u2019ll be charged per key that came with the apartment. Return them all promptly.\"), mdx(\"h3\", null, \"Follow Up About Your Security Deposit\"), mdx(\"p\", null, \"Follow up to make sure you get the security deposit back.\\xA0\", \"*\", \"*\", \"*\", \"*\", \"If you don\\u2019t follow up, who\\u2019s to say your landlord can\\u2019t get away with keeping your security deposit all together? It could happen, so be sure that it doesn\\u2019t by following up and asking for a timeline on its return to you.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/losing-security-deposit/","previous":{"id":"fcf15738-a259-553c-a363-6ba32eed5696","fields":{"slug":"/improving-animation-performance/"},"frontmatter":{"title":"Improving Animation Performance"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Improving Animation Performance\",\n  \"date\": \"2019-04-10\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Custom animations can help a website stand out among the competition, but poorly optimized assets can lead to performance issues that ultimately drive away users. If any of your animations render at less than 60 frames per second, then your visitors will notice, and the user experience will suffer. This guide explains how to keep your CSS and JavaScript animations running smoothly for everyone.\"), mdx(\"h3\", null, \"CSS Animations vs JavaScript Animations\"), mdx(\"p\", null, \"Animations made with JavaScript are sometimes called imperative animations, and those made with CSS are called declarative animations. CSS animations are handled by the browser\\u2019s compositor thread rather than the main thread responsible for painting and styling. Consequently, such animations are unaffected by the main thread\\u2019s more expensive tasks. Of course, animations that trigger the paint or layout events will require work from the main thread, which negates the benefits of using CSS animations.\"), mdx(\"p\", null, \"JavaScript, on the other hand, always gets executed by the main thread. Nonetheless, JavaScript gives you greater control over animations, so you\\u2019re better off using it in some situations. While CSS is ideal for simple transitions, JavaScript is recommended for animations with advanced effects such as bouncing. Animations that allow the user to pause or rewind should also be animated with JavaScript. JavaScript is necessary to implement certain effects like parallax scrolling. With the help of the Web Animations API, you can create complex animations for object-oriented applications. You can also use JavaScript to control CSS animations.\"), mdx(\"h3\", null, \"JavaScript Animation Tips\"), mdx(\"h4\", null, \"Use requestAnimationFrame()\"), mdx(\"p\", null, \"Instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeOut()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval()\"), \", use the native JavaScript method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requestAnimationFrame()\"), \" to execute your animation code at the best time for the browser. This method chooses the appropriate frame rate for the user\\u2019s device, so mobile visitors will see a different frame rate than desktop users.\"), mdx(\"h4\", null, \"Decouple animations from events\"), mdx(\"p\", null, \"The code responsible for handling events such as scrolling should be kept separate from your animation code.\"), mdx(\"h4\", null, \"Keep your JavaScript code concise\"), mdx(\"p\", null, \"Be wary of adding huge chunks of JavaScript to your web page. If your code becomes unwieldy, you could try using web workers to execute JavaScript animations on a different thread.\"), mdx(\"h3\", null, \"Choosing Which CSS Properties to Animate\"), mdx(\"p\", null, \"Continuous animations can consume a significant amount of resources, but some CSS properties are more costly to animate than others. The harder a browser must work to animate a property, the slower the frame rate will be. Therefore, choosing the right CSS properties to animate can have a huge impact on page performance. There are three main types of CSS properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Layout properties\"), \" - These determine the size and placement of page elements. Animations that change an element\\u2019s width and height can affect the placement of other page elements, which can cause a chain reaction known as \\u201Clayout thrash.\\u201D Since animations that change the page layout are especially costly, they are best avoided.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Paint properties\"), \" - These define the appearance of page elements. Making changes to properties such as color requires repainting, which can be costly. That said, simple animations that require a small portion of the viewport to be repainted may have a negligible impact on overall performance. Larger animations that require repainting may not be worth the effort.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Composite properties\"), \" - Which include transform and opacity, are your best friends for creating CSS animations with minimal cost. With transform, you can scale and rotate animations without affecting the page layout. Try to use composite properties for animations whenever possible. With a little creative thinking, you\\u2019d be surprised by what you can pull off with just these properties. ISL.co has a helpful blog post explaining how its team turned a janky layout animation into a smooth composite animation.\"))), mdx(\"h3\", null, \"CSS Animation Tips\"), mdx(\"h4\", null, \"Avoid simultaneous animations\"), mdx(\"p\", null, \"Animations that run smoothly in isolation may not work so well on a page alongside dozens of other animations. More than two animations going at the same time is likely to cause lag. Therefore, timing your animations so that they don\\u2019t all execute all at once is vital to maintaining consistent performance. This can be accomplished by adding transition delays. Figuring out how to optimally choreograph your animations may require some trial and error, but the performance boost you\\u2019ll get is worth the effort.\"), mdx(\"h4\", null, \"Examine your animations in slow motion\"), mdx(\"p\", null, \"If an animation looks good in slow motion, it will look great at normal speed. Slowing down an animation can help you better pinpoint rendering problems.\"), mdx(\"h4\", null, \"Delay all animations by a fraction of a second\"), mdx(\"p\", null, \"Since the browser is very busy when your page begins loading, delaying all animations until a few hundred milliseconds after the initial load event can make a noticeable difference in overall page performance.\"), mdx(\"h4\", null, \"Don\\u2019t bind CSS animations to scroll\"), mdx(\"p\", null, \"Animations that follow the viewport as the user scrolls are not only annoying, but they also drag down the performance of everything else on screen.\"), mdx(\"h4\", null, \"Combine CSS with SVGs\"), mdx(\"p\", null, \"Scalable vector graphics, or SVGs, are excellent for animations since they can be scaled without degrading resolution. You can create SVGs in a program like Adobe Illustrator and apply CSS to alter their appearance. Just another reason to choose SVGs over icon fonts.\"), mdx(\"h3\", null, \"When to Use Will-Change\"), mdx(\"p\", null, \"If you\\u2019ve tried everything else and are still having performance problems, then you might want to try adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"will-change\"), \" property to your animations. As its name implies, will-change indicates that an element\\u2019s properties will change so that the browser can make appropriate preparations. List the specific properties that will change like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".element {\\n  will-change: opacity;\\n}\\n\")), mdx(\"p\", null, \"Since using will-change consumes resources, be warned that overuse can lead to further performance problems. Putting it before every animation by default isn\\u2019t recommended. Only use will-change as a last resort to optimize page performance.\"), mdx(\"h3\", null, \"Put Your Animations to the Test\"), mdx(\"p\", null, \"Performance testing should be an ongoing process while building animations for your web app. The longer you wait to identify rendering issues, the harder it becomes to pinpoint the root of the problem.\"), mdx(\"p\", null, \"The developer tools for Chrome, Firefox and Safari offer a frame-by-frame breakdown of paint and render events under their Network tabs. This information can help you optimize animations as you design them. If you\\u2019re using Chrome, look under the Rendering tab in the DevTools console for additional features such as an FPS meter.\"), mdx(\"p\", null, \"The user\\u2019s screen size has a major impact on how animations display, so be sure to test your project on multiple platforms including mobile devices.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"2157aa90-ce4e-540b-b225-76ba914c926b","fields":{"slug":"/adopting-testing/"},"frontmatter":{"title":"Adopting Testing"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adopting Testing\",\n  \"date\": \"2019-09-20\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Tests are one of those things that everyone agrees is a good idea, yet many teams still don\\u2019t do. If you find yourself in one of those teams, don\\u2019t despair! In my experience, changing team culture to write test comes down to a simple idea: make it easier to write tests than to not write tests. I realize this may sound impossible since tests take time and effort, but this can be achieved in a few steps:\"), mdx(\"h3\", null, \"Make your test framework awesome\"), mdx(\"p\", null, \"Everyone tends to agree with the idea that test coverage is a good thing, but a lot of the pushback around writing tests is that it\\u2019s a pain. If your team has never worked with a good test setup, then writing tests can feel like an endless slog. You end up fighting battles with mock dependencies and hacky workarounds just to end up with a brittle test that nobody understands. Spend some time and make your test setup a pleasure to use, and focus on the developer experience. This may mean writing what look more like functional rather than pure unit tests - that\\u2019s fine! Test at the level that\\u2019s easiest and clearest to work with.\"), mdx(\"h3\", null, \"Be the change you wish to see in the codebase\"), mdx(\"p\", null, \"For developers that aren\\u2019t accustomed to writing tests it\\u2019s not always obvious how to begin to integrate tests into their workflow. Here, you can lead by example, by adding tests to all the new code you write. The best documentation on how to write tests for your codebase is for there to already be a slew of tests written that other developers can refer to. In addition, working test coverage into your own workflow is an excellent model for the rest of the team, and will help iron out any issues in the test system.\"), mdx(\"h3\", null, \"Ask for tests in code review\"), mdx(\"p\", null, \"Now that you\\u2019ve improved the test-writing experience, and modeled good test coverage in your own code, it\\u2019s time to start asking that other developers write tests as well. An easy way to do this is to simply ask other developers to add tests to their code in code-review. Hopefully, at this point, adding test coverage to pull requests should be less work than coming up with a reason not to given steps 1 and 2, and, afterall, everyone agrees it\\u2019s a good idea. Hopefully, the culture of the team should now begin to change towards writing tests as part of the normal flow. Once other developers start asking for test coverage in their code reviews as well that\\u2019s a good sign the culture change has stuck.\"), mdx(\"p\", null, \"You can also use tools like codecov or coveralls to automatically track test coverage in pull requests, and even fail builds that don\\u2019t meet a certain threshold.\"), mdx(\"p\", null, \"As testing becomes part of the team\\u2019s normal flow, and the codebase begins to have more and more tests written, the benefits of testing become obvious. There are fewer bugs, and developers begin to feel more comfortable refactoring and improving the existing code. It\\u2019s easy to just rip parts of the codebase out and refactor because you know the tests have your back. It becomes almost terrifying to imagine going back to before the code had tests (how did we do anything back then!?).\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}